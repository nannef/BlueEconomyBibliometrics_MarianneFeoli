axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#pie chart of negative contributions
# Filter the data to include only rows with negative views
negative_views_data <- view_counts_summarized %>%
filter(View == "negative")
#pie chart of negative contributions
# Filter the data to include only rows with negative views
negative_views_data <- view_counts_summarized.CC %>%
filter(View == "negative")
# Group by Country and Sector, and count the number of articles in each sector for each country
view_counts_by_country <- bibmetaEXTRA_cc %>%
group_by(AU_CO, View) %>%
summarise(article_count = n()) %>%
ungroup()
# Get the top countries based on the total number of articles published
top_countriesVIEWS <- view_counts_by_country %>%
group_by(AU_CO) %>%
summarise(total_articles = sum(article_count)) %>%
top_n(10) %>%
pull(AU_CO)
# Filter the data to keep only the top countries
view_counts_top_countries <- view_counts_by_country %>%
filter(AU_CO %in% top_countriesVIEWS)
# Summarize the count of articles in each sector for each country
view_counts_summarized.CC <- view_counts_top_countries %>%
group_by(AU_CO, View) %>%
summarise(total_articles = sum(article_count)) %>%
ungroup()
# Sort the data by country and total_articles in descending order
view_counts_summarized.CC <- view_counts_summarized.CC %>%
arrange(desc(total_articles))
# Create the bar plot
ggplot(view_counts_summarized.CC, aes(x = reorder(AU_CO, total_articles), y = total_articles, fill = View)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Total Articles", title = "Views Published by Top Countries",
fill = "View") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#now as a percentage
# Calculate the total articles for each country
total_articles_by_country <- view_counts_summarized.CC %>%
group_by(AU_CO) %>%
summarise(total_articles = sum(total_articles)) %>%
ungroup()
# Join the total_articles_by_country data to view_counts_summarized
view_counts_summarized.CC <- view_counts_summarized.CC %>%
left_join(total_articles_by_country, by = "AU_CO")
# Calculate the percentage of total articles for each country and view combination
view_counts_summarized.CC <- view_counts_summarized.CC %>%
mutate(percentage_total_articles = (total_articles.x / total_articles.y) * 100) %>%
select(-total_articles.y)
# Create the bar plot with percentage instead of the count
ggplot(view_counts_summarized.CC, aes(x = reorder(AU_CO, -percentage_total_articles), y = percentage_total_articles, fill = View)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Percentage of Total Articles", title = "Percentage of Articles with Negative Views by Country",
fill = "View") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#pie chart of negative contributions
# Filter the data to include only rows with negative views
negative_views_data <- view_counts_summarized.CC %>%
filter(View == "negative")
# Create the pie chart
ggplot(negative_views_data, aes(x = "", y = percentage_total_articles, fill = AU_CO)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Percentage of Articles with Negative Views by Country") +
theme_void() +
theme(legend.position = "bottom")
#Percentages of articles per sector (without considering point of view)
# Calculate the percentage for each sector
sector_counts <- metaEXTRA %>%
group_by(Sector) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
#pie chart about total % points of view
sector_counts <- table(metaEXTRA$Sector)
ggplot(data.frame(sector_counts), aes(x = "", y = Freq, fill = names(sector_counts))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Distribution of Sector Target") +
theme_void()
#I want to remove the non-targeted articles:
# Calculate the percentage for each sector
sector_counts <- metaEXTRA %>%
group_by(Sector) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Filter out the 'non-targeted' sector
sector_counts <- sector_counts %>%
filter(Sector != "non-targeted")
# Create the pie chart
ggplot(data = sector_counts, aes(x = "", y = count, fill = Sector)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Distribution of Sector Target (non-targeted excluded)") +
theme_void()
#And make one of all these vs non targeted, including % numbers:
# Step 1: Update the 'Sector' column
metaSEP2 <- metaSEP %>%
mutate(Sector = ifelse(Sector == "non-targeted", "non-targeted", "sector-related"))
# Step 2: Calculate the percentage for "non-targeted" and "Sector-related" categories
sector_counts2 <- metaSEP2 %>%
group_by(Sector) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Step 3: Create the bar plot
ggplot(sector_counts2, aes(x = Sector, y = count, fill = Sector)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_stack(vjust = 0.5)) +
labs(x = "", y = "Count", title = "Comparison of non-targeted and Sector-related") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.y = element_text(margin = margin(r = 10)),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#pie chart view
ggplot(sector_counts2, aes(x = "", y = count, fill = Sector)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Convert the bar chart to a pie chart
geom_text(aes(label = paste0(round(percentage, 2), "%")),
position = position_stack(vjust = 0.5),
size = 4,    # Adjust the font size of the percentage labels
vjust = -0.3,   # Adjust the vertical position of the labels
fontface = "bold") +   # Set the font face to bold
labs(x = "", y = "Count", title = "Comparison of non-targeted and Sector-related") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels (empty string)
axis.text.y = element_text(margin = margin(r = 10)),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
plot.title = element_text(size = 16, face = "bold"),
legend.position = "bottom",  # Move the legend to the bottom
legend.title = element_blank(),
legend.text = element_text(size = 10),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#Chart trying to summarize
# Calculate the total count
total_count <- sum(view_countsSEC$count)
# Create the pie chart with total count
ggplot(view_countsSEC, aes(x = "", y = count, fill = Sector)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, title = "Total Counts per Sector") +
theme_minimal() +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()
) +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), size = 1.5) +
annotate(
"text",
x = 0, y = 0,
label = paste("Total Count:", total_count),
size = 2,
color = "black"
)
#Sector effort evolution through years
sector_dataYR <- metaEXTRA %>%
group_by(Sector, year) %>%
summarise(count = n()) %>%
mutate(count) %>%
ungroup()
# Reorder levels of "Sector" with "Others" last
sector_dataYR$Sector <- fct_relevel(sector_dataYR$Sector, "Others", after = Inf)
# Create the scatter plot for negative field percentages per year for each sector
ggplot(sector_dataYR, aes(x = year, y = count, color = Sector, group = Sector)) +
geom_point() +
geom_line() +  # Add this line to connect the dots
labs(x = "Year", y = "Count", title = "Annual Research effort per Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.text = element_text(size = 10),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_color_brewer(palette = "Set1")
#pie chart about total % points of view
sector_counts <- table(metaEXTRA$Sector)
ggplot(data.frame(sector_counts), aes(x = "", y = Freq, fill = names(sector_counts))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Distribution of Sector Target",face = "bold") +
theme_void()
#Percentages of articles per sector (without considering point of view)
# Calculate the percentage for each sector
sector_counts <- metaEXTRA %>%
group_by(Sector) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
#pie chart about total % points of view
sector_counts <- table(metaEXTRA$Sector)
ggplot(data.frame(sector_counts), aes(x = "", y = Freq, fill = names(sector_counts))) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Distribution of Sector Target") +
theme_void()
#I want to remove the non-targeted articles:
# Calculate the percentage for each sector
sector_counts <- metaEXTRA %>%
group_by(Sector) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Filter out the 'non-targeted' sector
sector_counts <- sector_counts %>%
filter(Sector != "non-targeted")
# Create the pie chart
ggplot(data = sector_counts, aes(x = "", y = count, fill = Sector)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(title = "Distribution of Sector Target (non-targeted excluded)") +
theme_void()
#And make one of all these vs non targeted, including % numbers:
# Step 1: Update the 'Sector' column
metaSEP2 <- metaSEP %>%
mutate(Sector = ifelse(Sector == "non-targeted", "non-targeted", "sector-related"))
# Step 2: Calculate the percentage for "non-targeted" and "Sector-related" categories
sector_counts2 <- metaSEP2 %>%
group_by(Sector) %>%
summarise(count = n()) %>%
mutate(percentage = count / sum(count) * 100)
# Step 3: Create the bar plot
ggplot(sector_counts2, aes(x = Sector, y = count, fill = Sector)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(percentage, 2), "%")), position = position_stack(vjust = 0.5)) +
labs(x = "", y = "Count", title = "Comparison of non-targeted and Sector-related") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none",
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.text.y = element_text(margin = margin(r = 10)),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#pie chart view
ggplot(sector_counts2, aes(x = "", y = count, fill = Sector)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +  # Convert the bar chart to a pie chart
geom_text(aes(label = paste0(round(percentage, 2), "%")),
position = position_stack(vjust = 0.5),
size = 4,    # Adjust the font size of the percentage labels
vjust = -0.3,   # Adjust the vertical position of the labels
fontface = "bold") +   # Set the font face to bold
labs(x = "", y = "Count", title = "Comparison of non-targeted and Sector-related") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels (empty string)
axis.text.y = element_text(margin = margin(r = 10)),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
plot.title = element_text(size = 16, face = "bold"),
legend.position = "bottom",  # Move the legend to the bottom
legend.title = element_blank(),
legend.text = element_text(size = 10),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#Chart trying to summarize
# Calculate the total count
total_count <- sum(view_countsSEC$count)
# Create the pie chart with total count
ggplot(view_countsSEC, aes(x = "", y = count, fill = Sector)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
labs(x = NULL, y = NULL, title = "Total Counts per Sector") +
theme_minimal() +
theme(
axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
plot.title = element_text(size = 16, face = "bold"),
legend.position = "bottom",
legend.title = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank()
) +
scale_fill_brewer(palette = "Set1") +
geom_text(aes(label = count), position = position_stack(vjust = 0.5), size = 1.5) +
annotate(
"text",
x = 0, y = 0,
label = paste("Total Count:", total_count),
size = 2,
color = "black"
)
#Sector effort evolution through years
sector_dataYR <- metaEXTRA %>%
group_by(Sector, year) %>%
summarise(count = n()) %>%
mutate(count) %>%
ungroup()
# Reorder levels of "Sector" with "Others" last
sector_dataYR$Sector <- fct_relevel(sector_dataYR$Sector, "Others", after = Inf)
# Create the scatter plot for negative field percentages per year for each sector
ggplot(sector_dataYR, aes(x = year, y = count, color = Sector, group = Sector)) +
geom_point() +
geom_line() +  # Add this line to connect the dots
labs(x = "Year", y = "Count", title = "Annual Research effort per Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.text = element_text(size = 10),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_color_brewer(palette = "Set1")
ggplot(sector_dataYR, aes(x = year, y = count, color = Sector, group = Sector)) +
geom_point() +
geom_line() +  # Add this line to connect the dots
labs(x = "Year", y = "Count", title = "Annual Research effort per Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.text = element_text(size = 10),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_color_brewer(palette = "Set1")
#research effort by country/sector
# Group by Country and Sector, and count the number of articles in each sector for each country
sector_counts_by_country <- bibmetaEXTRA_cc %>%
group_by(AU_CO, Sector) %>%
summarise(article_count = n()) %>%
ungroup()
# Get the top countries based on the total number of articles published
top_countries <- sector_counts_by_country %>%
group_by(AU_CO) %>%
summarise(total_articles = sum(article_count)) %>%
top_n(10) %>%
pull(AU_CO)
# Filter the data to keep only the top countries
sector_counts_top_countries <- sector_counts_by_country %>%
filter(AU_CO %in% top_countries)
# Summarize the count of articles in each sector for each country
sector_counts_summarized <- sector_counts_top_countries %>%
group_by(AU_CO, Sector) %>%
summarise(total_articles = sum(article_count)) %>%
ungroup()
# Sort the data by country and total_articles in descending order
sector_counts_summarized <- sector_counts_summarized %>%
arrange(desc(total_articles))
# Create the bar plot
ggplot(sector_counts_summarized, aes(x = reorder(AU_CO, total_articles), y = total_articles, fill = Sector)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Total Articles", title = "Top Sectors Published by Top Countries",
fill = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
#research effort by country/sector
# Group by Country and Sector, and count the number of articles in each sector for each country
sector_counts_by_country <- bibmetaEXTRA_cc %>%
group_by(AU_CO, Sector) %>%
summarise(article_count = n()) %>%
ungroup()
# Get the top countries based on the total number of articles published
top_countries <- sector_counts_by_country %>%
group_by(AU_CO) %>%
summarise(total_articles = sum(article_count)) %>%
top_n(10) %>%
pull(AU_CO)
# Filter the data to keep only the top countries
sector_counts_top_countries <- sector_counts_by_country %>%
filter(AU_CO %in% top_countries)
# Summarize the count of articles in each sector for each country
sector_counts_summarized <- sector_counts_top_countries %>%
group_by(AU_CO, Sector) %>%
summarise(total_articles = sum(article_count)) %>%
ungroup()
# Sort the data by country and total_articles in descending order
sector_counts_summarized <- sector_counts_summarized %>%
arrange(desc(total_articles))
# Create the bar plot
ggplot(sector_counts_summarized, aes(x = reorder(AU_CO, total_articles), y = total_articles, fill = Sector)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Total Articles", title = "Top Sectors Published by Top Countries",
fill = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
panel.grid.major.y = element_line(color = "gray90"),
panel.grid.minor = element_blank()) +
scale_fill_brewer(palette = "Set1")
# Get the top countries based on the total number of articles published
top_countries <- sector_counts_by_country %>%
group_by(AU_CO) %>%
summarise(total_articles = sum(article_count)) %>%
top_n(10) %>%
pull(AU_CO)
# Filter the data to keep only the top countries
sector_counts_top_countries <- sector_counts_by_country %>%
filter(AU_CO %in% top_countries)
# Create a cross-tabulation of sectors by countries
sector_counts_matrix <- sector_counts_top_countries %>%
pivot_wider(names_from = Sector, values_from = article_count, values_fill = 0)
#str(sector_counts_matrix)
# Calculate the distance between countries based on sectors (Euclidean distance)
distance_matrix <- as.matrix(dist(t(sector_counts_matrix[,-1])))
# Perform hierarchical clustering on the distance matrix using the dendextend package
dend <- as.dendrogram(hclust(as.dist(distance_matrix)))
# Reorder the rows of the data based on the clustering
reordered_matrix <- sector_counts_matrix
# Extract the row names (countries) and convert them to a factor
reordered_countries <- factor(rownames(reordered_matrix), levels = rownames(reordered_matrix))
# Create the cluster map
ggplot(data = gather(reordered_matrix, Sector, Count, -AU_CO)) +
aes(x = AU_CO, y = Sector) +
geom_tile(aes(fill = Count), color = "white") +
scale_fill_viridis_c(option = "magma", direction = -1) +  # Change the color palette if desired
labs(x = "Country", y = "Sector", title = "Cluster Map of Sectors Focus by Top Publishing Countries") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(hjust = 0.5),
legend.position = "right",
plot.title = element_text(size = 16, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
axis.line.x = element_line(color = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(here("Plots/clustermap.jpg"), width = 20, height = 20, units = "cm") #save the map on the plot folder
#Top publishing sectors per media type (which sectors have most attention)
# Melt the data frame to long format for easier plotting
melted_dataSECTORS <- alltogether_EXTRA %>%
select(DI, Sector, Policies, Twitter, Facebook, Blogs, News, Wikipedia) %>%
pivot_longer(cols = c(Policies, Twitter, Facebook, Blogs, News, Wikipedia),
names_to = "Media", values_to = "Count")
# Plot the trend of points of view by media type
ggplot(data = melted_dataSECTORS, aes(x = Media, y = Count, fill = Sector, group = Sector)) +
geom_col(position = "dodge") +
labs(x = "Sector", y = "Count", title = "Sector Trend by Media Type",
fill = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filter out the 'non-targeted' sector
melted_dataSECTORSNF <- melted_dataSECTORS %>%
filter(Sector != "non-targeted")
# Plot the trend of points of view by media type
ggplot(data = melted_dataSECTORSNF, aes(x = Media, y = Count, fill = Sector, group = Sector)) +
geom_col(position = "dodge") +
labs(x = "Media", y = "Count", title = "Sector Trend by Media Type (without non-targeted)",
fill = "Sector") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#Linear regression to determine linear behavior of publications per year growth trend
lm_mode_growth <- lm(count ~ year, data = view_counts_total_per_year)
summary(lm_mode_growth) # Obtain the summary statistics
#Linear regression to determine linear behavior of altimetrics per year growth trend
totalALT_per_year$count <- rowSums(totalALT_per_year[, c("Policies", "Twitter", "Facebook", "Blogs", "News", "Wikipedia")]) #create a column that sums all types
lm_mode_growth_Alt <- lm(count ~ year, data = totalALT_per_year)
summary(lm_mode_growth_Alt) # Obtain the summary statistics
